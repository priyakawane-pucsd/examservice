{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/examservice/exams": {
            "post": {
                "description": "Create a new exam based on the provided request body.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exams"
                ],
                "summary": "Create a new exam",
                "parameters": [
                    {
                        "description": "Exam request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ExamRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "$ref": "#/definitions/dto.ExamResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/utils.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.CustomError"
                        }
                    }
                }
            }
        },
        "/examservice/exams/": {
            "get": {
                "description": "Retrieve a list of all exams.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exams"
                ],
                "summary": "Get all exams",
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.ListExamsResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/utils.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.CustomError"
                        }
                    }
                }
            }
        },
        "/examservice/ping/": {
            "get": {
                "description": "Pings the server and returns \"Okay\" if successful.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ping"
                ],
                "summary": "Pings the server.",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "Flag indicating whether to ping the database",
                        "name": "db",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PingResponse"
                        }
                    }
                }
            }
        },
        "/examservice/questions": {
            "post": {
                "description": "Create or update questions based on the request",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Questions"
                ],
                "summary": "Create or update questions",
                "parameters": [
                    {
                        "description": "Question request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.QuestionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully created or updated questions",
                        "schema": {
                            "$ref": "#/definitions/dto.QuestionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/utils.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.CustomError"
                        }
                    }
                }
            }
        },
        "/examservice/questions/": {
            "get": {
                "description": "Retrieve a list of all questions.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Questions"
                ],
                "summary": "Get all questions",
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.ListQuestionResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/utils.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.CustomError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.Exam": {
            "type": "object",
            "properties": {
                "_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "duration": {
                    "type": "integer"
                },
                "end_time": {
                    "type": "string"
                },
                "questions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "start_time": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dto.ExamRequest": {
            "type": "object",
            "properties": {
                "_id": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "duration": {
                    "type": "integer"
                },
                "end_time": {
                    "type": "string"
                },
                "questions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "start_time": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "dto.ExamResponse": {
            "type": "object",
            "properties": {
                "_id": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.ListExamsResponse": {
            "type": "object",
            "properties": {
                "exam": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.Exam"
                    }
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.ListQuestionResponse": {
            "type": "object",
            "properties": {
                "questions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.Question"
                    }
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.PingResponse": {
            "type": "object",
            "properties": {
                "message": {},
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "dto.Question": {
            "type": "object",
            "properties": {
                "choices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "correct": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "explanation": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "dto.QuestionRequest": {
            "type": "object",
            "properties": {
                "_id": {
                    "type": "string"
                },
                "choices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "correct": {
                    "type": "string"
                },
                "explanation": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "dto.QuestionResponse": {
            "type": "object",
            "properties": {
                "_id": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "utils.CustomError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        }
    }
}