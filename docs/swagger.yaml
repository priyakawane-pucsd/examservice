definitions:
  dto.AnswerRequest:
    properties:
      answers:
        items:
          $ref: '#/definitions/dto.QuestionAnswer'
        type: array
      examId:
        type: string
    type: object
  dto.AnswerResponse:
    properties:
      _id:
        type: string
      statusCode:
        type: integer
    type: object
  dto.Choice:
    properties:
      key:
        type: string
      value:
        type: string
    type: object
  dto.Exam:
    properties:
      _id:
        type: string
      createdAt:
        type: integer
      createdBy:
        type: integer
      description:
        type: string
      difficultyLevel:
        type: string
      duration:
        type: integer
      endTime:
        type: integer
      examFee:
        type: number
      isDeleted:
        type: boolean
      questions:
        items:
          type: string
        type: array
      startTime:
        type: integer
      subTopic:
        type: string
      title:
        type: string
      topic:
        type: string
      updatedAt:
        type: integer
    type: object
  dto.ExamRequest:
    properties:
      description:
        type: string
      difficultyLevel:
        type: string
      duration:
        type: integer
      endTime:
        type: integer
      examFee:
        type: number
      questions:
        items:
          type: string
        type: array
      startTime:
        type: integer
      subTopic:
        type: string
      title:
        type: string
      topic:
        type: string
    type: object
  dto.ExamResponse:
    properties:
      _id:
        type: string
      statusCode:
        type: integer
    type: object
  dto.ListExamsResponse:
    properties:
      exam:
        items:
          $ref: '#/definitions/dto.Exam'
        type: array
    type: object
  dto.ListQuestionResponse:
    properties:
      questions:
        items:
          $ref: '#/definitions/dto.Question'
        type: array
    type: object
  dto.PingResponse:
    properties:
      message: {}
      statusCode:
        type: integer
    type: object
  dto.Question:
    properties:
      _id:
        type: string
      choices:
        items:
          $ref: '#/definitions/dto.Choice'
        type: array
      correct:
        type: string
      createdAt:
        type: integer
      createdBy:
        type: integer
      explanation:
        type: string
      isDeleted:
        type: boolean
      subTopic:
        type: string
      text:
        type: string
      topic:
        type: string
      updatedAt:
        type: integer
    type: object
  dto.QuestionAnswer:
    properties:
      answer:
        type: string
      questionId:
        type: string
    type: object
  dto.QuestionByIdResponse:
    properties:
      question:
        $ref: '#/definitions/dto.Question'
      statusCode:
        type: integer
    type: object
  dto.QuestionRequest:
    properties:
      choices:
        items:
          $ref: '#/definitions/dto.Choice'
        type: array
      correct:
        type: string
      explanation:
        type: string
      subTopic:
        type: string
      text:
        type: string
      topic:
        type: string
    type: object
  dto.QuestionResponse:
    properties:
      _id:
        type: string
      statusCode:
        type: integer
    type: object
  utils.CustomError:
    properties:
      message:
        type: string
      statusCode:
        type: integer
    type: object
info:
  contact: {}
paths:
  /examservice/answers/submit/{id}:
    put:
      consumes:
      - application/json
      description: Creates or updates an answer based on the provided request body.
      parameters:
      - description: User ID
        in: header
        name: X-USER-ID
        required: true
        type: string
      - description: ID of the answer to update
        in: path
        name: id
        type: string
      - description: Answer request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.AnswerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: '#/definitions/dto.AnswerResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/utils.CustomError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.CustomError'
      summary: Create or update answer
      tags:
      - Answers
  /examservice/exams/:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all exams filtered by topic and subTopic.
      parameters:
      - description: Filter by topic
        in: query
        name: topic
        type: string
      - description: Filter by subTopic
        in: query
        name: subTopic
        type: string
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset
        in: query
        name: offset
        type: integer
      - description: User ID
        in: header
        name: X-USER-ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful response
          schema:
            items:
              $ref: '#/definitions/dto.ListExamsResponse'
            type: array
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/utils.CustomError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.CustomError'
      summary: Get all exams
      tags:
      - Exams
  /examservice/exams/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes an exam by its ID.
      parameters:
      - description: Exam ID
        in: path
        name: id
        required: true
        type: string
      - description: User ID
        in: header
        name: X-USER-ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful response
          schema:
            type: string
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/utils.CustomError'
        "404":
          description: Exam not found
          schema:
            $ref: '#/definitions/utils.CustomError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.CustomError'
      summary: Delete an exam by ID
      tags:
      - Exams
    get:
      consumes:
      - application/json
      description: Retrieve an exam based on the provided exam ID.
      parameters:
      - description: Exam ID
        in: path
        name: id
        required: true
        type: string
      - description: User ID
        in: header
        name: X-USER-ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful response
          schema:
            $ref: '#/definitions/dto.Exam'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/utils.CustomError'
        "404":
          description: Exam not found
          schema:
            $ref: '#/definitions/utils.CustomError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.CustomError'
      summary: Get an exam by ID
      tags:
      - Exams
    put:
      consumes:
      - application/json
      description: Create a new exam or update an existing one based on the provided
        request body.
      parameters:
      - description: Exam request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ExamRequest'
      - description: User ID
        in: header
        name: X-USER-ID
        required: true
        type: string
      - description: ID of the exam to update, if applicable
        in: path
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful response
          schema:
            $ref: '#/definitions/dto.ExamResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/utils.CustomError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.CustomError'
      summary: Create or update an exam
      tags:
      - Exams
  /examservice/ping/:
    get:
      description: Pings the server and returns "Okay" if successful.
      parameters:
      - description: Flag indicating whether to ping the database
        in: query
        name: db
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PingResponse'
      summary: Pings the server.
      tags:
      - Ping
  /examservice/questions/:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all questions.
      parameters:
      - description: User ID
        in: header
        name: X-USER-ID
        required: true
        type: string
      - description: Filter by topic
        in: query
        name: topic
        type: string
      - description: Filter by subTopic
        in: query
        name: subTopic
        type: string
      - description: Filter by userId
        in: query
        name: userId
        type: string
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successful response
          schema:
            items:
              $ref: '#/definitions/dto.ListQuestionResponse'
            type: array
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/utils.CustomError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.CustomError'
      summary: Get all questions
      tags:
      - Questions
  /examservice/questions/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a question based on the provided ID.
      parameters:
      - description: Question ID
        in: path
        name: id
        required: true
        type: string
      - description: User ID
        in: header
        name: X-USER-ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful response
          schema:
            $ref: '#/definitions/dto.QuestionResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/utils.CustomError'
        "404":
          description: Question not found
          schema:
            $ref: '#/definitions/utils.CustomError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.CustomError'
      summary: Delete a question by ID
      tags:
      - Questions
    get:
      consumes:
      - application/json
      description: Retrieves a question based on the provided ID.
      parameters:
      - description: User ID
        in: header
        name: X-USER-ID
        required: true
        type: string
      - description: Question ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful response
          schema:
            $ref: '#/definitions/dto.QuestionByIdResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/utils.CustomError'
        "404":
          description: Question not found
          schema:
            $ref: '#/definitions/utils.CustomError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.CustomError'
      summary: Retrieve a question by ID
      tags:
      - Questions
    put:
      consumes:
      - application/json
      description: Create or update questions based on the request
      parameters:
      - description: User ID
        in: header
        name: X-USER-ID
        required: true
        type: string
      - description: ID of the question to update
        in: path
        name: id
        type: string
      - description: Question request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.QuestionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully created or updated question
          schema:
            type: string
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/utils.CustomError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.CustomError'
      summary: Create or update questions
      tags:
      - Questions
swagger: "2.0"
